#!/bin/sh

# Font colors
BLACK='\033[30m'
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
bLUE='\033[34m'
MAGENTA='\033[35m'
CYAN='\033[36m'
LIGHTGRAY='\033[37m'
DARKGRAY='\033[90m'
LIGHTRED='\033[91m'
LIGHTGREEN='\033[92m'
LIGHTYELLOW='\033[93m'
LIGHTBLUE='\033[94m'
LIGHTMAGENTA='\033[95m'
LIGHTCYAN='\033[96m'
WHITE='\033[97m'
NORMARIZE='\033[0m'

# Envs
: ${CMDO_HOME:=$HOME/.cmdo}

usage() {
  echo >&2 "Usage cmdo <command>"
  echo >&2 ""
  echo >&2 "There are common cmdo commands:"
  echo >&2 ""
  echo >&2 "install   Fetch and install a package from remote repository"
  echo >&2 "fetch     Fetch a source from remote repository"
  echo >&2 "update    Update a package"
  echo >&2 "remove    Remove a package from disk"
}

list() {
  find ${CMDO_HOME} -name .git -type d | \
    grep -oP "^${CMDO_HOME}/pkg/\K.*" | \
    xargs --max-args=1 --no-run-if-empty dirname
}

fetch() {
  case "$TARGET" in
    github.com*|bitbucket.org/*|hub.jazz.net/git/*|git.apache.org/*|git.openstack.org/*)
      vcs=git
      repository_prefix="https://"
      ;;
    *)
      printf >&2 "${RED}Repository not supported: ${TARGET}${NORMARIZE}\n"
      exit 1
  esac

  target_dir="$CMDO_HOME/pkg/$TARGET"
  if [ -d "${target_dir}/.git" ]; then
    return
  fi

  printf "${GREEN}Fetching ${TARGET}${NORMARIZE}\n"
  case "$vcs" in
    git)
      git clone --quiet "${repository_prefix}${TARGET}" "${target_dir}"
      ;;
  esac
  if [ $? != 0 ]; then
    printf "${RED}Fetching ${TARGET} failed${NORMARIZE}\n"
    exit 1
  fi
}

install() {
  printf "${GREEN}Installing ${TARGET}${NORMARIZE}\n"
  fetch "$TARGET" >/dev/null

  pkgdir="$CMDO_HOME/pkg/$TARGET"

  dirs="bin usr etc"
  for d in $dirs; do
    source="$pkgdir/$d"
    test -d "$source" && cp -rni "$source" "$CMDO_HOME"
  done
  for f in "$pkgdir"/*; do
    mkdir -p "$CMDO_HOME/bin"
    test -x "$f" && test ! -d "$f" && cp -ni "$f" -t "$CMDO_HOME/bin"
  done
}

update() {
  case "$TARGET" in
    github.com*|bitbucket.org/*|hub.jazz.net/git/*|git.apache.org/*|git.openstack.org/*)
      vcs=git
      repository_prefix="https://"
      ;;
    *)
      printf >&2 "${RED}Repository not supported: ${TARGET}${NORMARIZE}\n"
      exit 1
  esac

  target_dir="$CMDO_HOME/pkg/$TARGET"
  if [ ! -d "${target_dir}/.git" ]; then
    printf "${RED}Not installed: ${TARGET}${NORMARIZE}\n"
    exit 1
  fi

  printf "${GREEN}Updating ${TARGET}${NORMARIZE}\n"
  case "$vcs" in
    git)
      (
        cd "$target_dir"
        git pull --quiet origin master
      )
      ;;
  esac
  if [ $? != 0 ]; then
    printf "${RED}Updating ${TARGET} failed${NORMARIZE}\n"
    exit 1
  fi
}

remove() {
  case "$TARGET" in
    github.com*|bitbucket.org/*|hub.jazz.net/git/*|git.apache.org/*|git.openstack.org/*)
      vcs=git
      repository_prefix="https://"
      ;;
    *)
      printf >&2 "${RED}Repository not supported: ${TARGET}${NORMARIZE}\n"
      exit 1
  esac

  target_dir="$CMDO_HOME/pkg/$TARGET"
  if [ ! -d "${target_dir}/.git" ]; then
    printf "${RED}Not installed: ${TARGET}${NORMARIZE}\n"
    exit 1
  fi

  printf "${GREEN}Removing ${TARGET}${NORMARIZE}\n"
  rm -rf "$target_dir"
}

if [ $# -eq 0 ]; then
  usage
  exit
fi

case "$1" in
  list|fetch|install|update|remove)
    SUB_COMMAND="$1"
    ;;
  -h|--help)
    usage
    exit
    ;;
  *)
    printf >&2 "${RED}Unknown cmdo command: $1${NORMARIZE}\n"
    exit 1
    ;;
esac
shift
TARGET=$1

$SUB_COMMAND

